@startuml@

hide empty members
skinparam linetype ortho

package std <<frame>> {
  class invalid_argument
}

package fits <<frame>> {
  class keyword_record {
    - m_key : string
    - m_value : variant[0..1]
    - m_comment: string[0..1]
    __ Member Functions __
    + <<constructor>>(key : string)
    + <<constructor>>(key : string, value : T)
    + <<constructor>>(key : string, value : T, comment : string)
    + <<assignment>>(source : keyword_record)
    + swap(other : keyword_record)
    ..
    + key() : string
    ..
    + has_a_value() : boolean
    + value() : T
    + set_value(value : T)
    + operator=(value : T)
    ..
    + has_a_comment() : boolean
    + comment() : boolean
    + set_comment(comment : string)
    __ Non-member Functions __
    <<comparison>>(a : keyword_record, b : keyword_record) : boolean
    swap(a : keyword_record, b : keyword_record)
    ..
    to_bytes(entry : keyword_record) : byte[80]
    extract_keyword_record(bytes : byte[80])
  }

  package detail <<frame>> {
    class invalid_string {
      + m_key : string
      + m_bad_character_index : integer
    }
  }

  class invalid_key <<Exception>> {
    - m_bad_string : invalid_string
    ____
    + <<constructor>>(bad_string : invalid_string, message : string)
    + what() : string
    + key() : string
    + bad_character() : character
    + bad_character_index() : integer
  }

  class invalid_comment <<Exception>> {
    - m_bad_string : invalid_string
    ____
    + <<constructor>>(bad_string : invalid_string, message : string)
    + what() : string
    + comment() : string
    + bad_character() : character
    + bad_character_index() : integer
  }
}

invalid_key --|> invalid_argument
invalid_key *-- "1" invalid_string
keyword_record --> "1" invalid_key : may throw >

invalid_comment --|> invalid_argument
invalid_comment *-- "1" invalid_string
keyword_record --> "1" invalid_comment : may throw >

@enduml@
